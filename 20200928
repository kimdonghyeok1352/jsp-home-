<html>
<head>
<script type="text/javascript">
function on() {
		if(f.id.value=="" || f.age.value==""){
			alert("다시입력");
			return false;
		}else{
			true;
		}
			
	}
</script>	
<meta charset="EUC-KR">
<title>Insert title here</title>
</head>
<body>
	<form action="param" method="get" name="f">
	아이디:<input name="id">
	나이:<input name="age">
	<input type="submit" value="제출" onclick="on()">
	</form>
</body>
</html>
----------------------------------------------------------------------
위에꺼랑세트
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html; charset=EUC-kr");
		PrintWriter out = response.getWriter();
		out.print("<html><body>");
		String id = request.getParameter("id");
		int age = Integer.parseInt(request.getParameter("age"));
		out.print(id);
		out.print(age);
		out.print("</body></html>");
		out.close();
	}
----------------------------------------------------------------------
jdbc랑 jsp연결 간단하게
sever가서 sever.xml가서
맨밑에 
<Context docBase="Web" path="/Web" reloadable="true" source="org.eclipse.jst.jee.server:Web">
      <Resource name="jdbc/pool" auth="Container" type="javax.sql.DataSource" driverClassName="oracle.jdbc.driver.OracleDriver" maxWait="5000" username="sys as sysdba" password="1234" url="jdbc:oracle:thin:@172.16.7.67:1521/xepdb1" />
      </Context>
----------------------------------------------------------------------
MemberDao 새부분
package model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class MemberDAO {
	/*String id = "sys as sysdba";
	String pass = "1234";
	String url = "jdbc:oracle:thin:@172.16.7.67:1521/xepdb1";*/

	Connection con;// 데이터베이스에 접근할 수 있도록
	PreparedStatement pstmt;// 쿼리실행(조작)시키는 객체
	ResultSet rs;// 결과리턴받아 자바에 저장하는 객체

	public void getCon() {//db접속
		try{
			
			/*Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection(url,id,pass);*/
			Context initctx=new InitialContext();
			//외부(sever.xml)에서 데이터 읽어들여야 함
			Context envctx=(Context) initctx.lookup("java:comp/env");
			//톰캣 서버에 정보를 담아 놓은 곳으로 이동시킨다.
			
			DataSource ds=(DataSource)envctx.lookup("jdbc/pool");
			//데이터 소스 객체 선언
			
			con=ds.getConnection();
			//데이터 소스를 기준으로 연결
		  }catch(Exception e) {}
	
	
}

	public void insertMember(MemberBean mbean) { //mbean은 MemberBean의 객체이기때문에
		//삽입
		try {
			getCon();
			String sql="insert into Mem values(?,?,?,?,?,?,?,?)";
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1,mbean.getId());
			pstmt.setString(2,mbean.getPwd1());
			pstmt.setString(3,mbean.getEmail());
			pstmt.setString(4,mbean.getTel());
			pstmt.setString(5,mbean.getHobby());
			pstmt.setString(6,mbean.getJob());
			pstmt.setString(7,mbean.getAge());
			pstmt.setString(8,mbean.getInfo());
		
			pstmt.executeUpdate();//엔터역할
			//insert,update,delete 사용시쓰는 메소드
			
			con.close();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public Vector<MemberBean> allMember() { //입력한 데이터 모두 조회
		Vector<MemberBean> v = new Vector<>();
		try {
			getCon();//db연결
			
			String sql="select * from mem";
			pstmt=con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				MemberBean bean=new MemberBean();
				//컬럼으로 나눠진 데이터들을 빈클래스에 저장한다.
				bean.setId(rs.getString(1));
				bean.setPwd1(rs.getString(2));
				bean.setEmail(rs.getString(3));
				bean.setTel(rs.getString(4));
				bean.setHobby(rs.getString(5));
				bean.setJob(rs.getString(6));
				bean.setAge(rs.getString(7));
				bean.setInfo(rs.getString(8));
				//membearbean클래스가 패키징 됨
				v.add(bean);//vector객체에 다 저장!
			}
		}catch(Exception E) {}
		return v;
	 	
	}
  public MemberBean oneMember(String id) {
	  //한 회원의정보
	  MemberBean bean = new MemberBean();
	  try {
		  getCon(); //db연결
		  
		  String sql="select * from mem where id = ?"; //
		  pstmt=con.prepareStatement(sql);
		  pstmt.setString(1, id); // ? 값에 맵핑시킨다
		  rs = pstmt.executeQuery();
		  
		  if(rs.next()) {//데이터가 있다면
			  bean.setId(rs.getString(1));
			  bean.setPwd1(rs.getString(2));
			  bean.setEmail(rs.getString(3));
			  bean.setTel(rs.getString(4));
			  bean.setHobby(rs.getString(5));
			  bean.setJob(rs.getString(6));
			  bean.setAge(rs.getString(7));
			  bean.setInfo(rs.getString(8));
			  
		  }
		  con.close();
	  }catch(Exception e) {}
   return bean;
  }
  //회원의 패스워드 값을 리턴받는 메소드
  public String getPass(String id) {
	  String pass="";
	  try {
		  getCon();
		  String sql="select pwd1 from mem where id=?";
		  //?에 값 매핑
		  pstmt=con.prepareStatement(sql);
		  pstmt.setString(1,id);
		  rs=pstmt.executeQuery();
		  
		  if(rs.next()) {
			  pass=rs.getString(1);
		  }con.close();
	  }catch(Exception e) {
		  e.printStackTrace();
	  }
	  return pass;
	  
  }
  public void update(MemberBean bean) {
	  getCon();
	  try {
		  String sql="update mem set email=?,tel=? where id=?";
		  pstmt = con.prepareStatement(sql);
		  pstmt.setString(1,bean.getEmail());
		  pstmt.setString(2,bean.getTel());
		  pstmt.setString(3,bean.getId());
		  
		  pstmt.executeUpdate();
		  
	  
		  
	  }catch(Exception e) {
		  e.printStackTrace();
	  }
  }
  public void delete(String id) {
	  getCon();
	  try {
		  String sql = "delete from mem where id=?";
		  pstmt = con.prepareStatement(sql);
		  pstmt.setString(1,id);  
		  pstmt.executeUpdate();
		  con.close();
	  }catch(Exception e) {
		  e.printStackTrace();
	  }
  }
}	
----------------------------------------------------------------------
쿠키: 웹 사이트에 접속할 때 생성되는 임시 파일
쿠키 목적:사이트에 접속한 사용자의 정보유지, 사용자드르이 해당 사이트에 쉽게 접속하기위해(자동로그인)
ex) 로그인->id,pw를 기록한 쿠키가 만들어진다

-쿠키는 쿠키를 생성한 서버에만 전송됨        
----------------------------------------------------------------------
쿠키!
<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html>
<html>
<head>
<style type="text/css">
h3{
 text-align: center;
}
.save{
	text-align: center;
}
.login{
	text-align: center;
}
body{
	text-align: center;
}
</style>
<meta charset="EUC-KR">
<title>Insert title here</title>
</head>
<body>
<%
	//사용자 컴퓨터의 쿠키 저장소로부터
	//쿠키값을 읽어들임
	
	//값이 몇개인지 모르기 때문에 배열을 사용하여
	//쿠키값을 저장할 것이다.
	Cookie[] co=request.getCookies();
	String id="";
	//쿠키값이 없을수도 있기때문에 null로 처리해줌
	if(co!=null){ //쿠키값이 있으면!
		for(int i = 0; i<co.length; i++){
			if(co[i].getName().equals("id")){
				id=co[i].getValue();
				break;
			}
			//원하는 데이터를 찾았기에 반복문 빠져나옴
		}
	}
%>
	<form action="CookieLoginProc.jsp" method="post">
	<h3>쿠키</h3>
	<table border="1">
		<tr>
			<td>아이디</td>
			<td><input name="id" value="<%=id%>"></td>
		</tr>
		<tr>
			<td>패스워드</td>
			<td><input type="password" name="pass"></td>
		</tr>	
		<tr>
			<td colspan="2"><input type="checkbox" value="1" name ="save" class="save">아이디저장</td>
		</tr>
		<tr>
			<td colspan="2"><input type="submit" value="로그인" class="login"></td>
		</tr>		
	</table>
	</form>
</body>
</html>
----------------------------------------------------------------------
위에꺼랑 세트
<body>
	<%
	request.setCharacterEncoding("EUC-KR");
	
	String save= request.getParameter("save");
	//체크박스가 체크되었는지 판단
	String id=request.getParameter("id");
	if(save!=null){//아이디저장버튼이 체크되어잇는상태!
		Cookie co=new Cookie("id",id);
		//첫번째 스트링값은 String 키값
		//두번째 스트링값은 value 값
		co.setMaxAge(60*5);
		//3분간 유효 -->3분지나면 자동로그인했던 아이디값이 지워진다
		
		response.addCookie(co);
		//사용자에게 쿠기값넘긴다.
		out.write("쿠키생성완료");
	}
	%>
</body>
----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

